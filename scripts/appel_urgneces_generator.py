# generate_emergency_calls.py
import vertexai
from vertexai.generative_models import GenerativeModel
import json
import os

# Configuration
GCP_PROJECT_ID = os.getenv("GCP_PROJECT_ID")
vertexai.init(project=GCP_PROJECT_ID, location="europe-west1")
MODEL_NAME = "gemini-2.0-flash"
model = GenerativeModel(MODEL_NAME)

# Sc√©narios d'urgence
scenarios = [
    "Accident de voiture avec bless√© conscient",
    "Personne √¢g√©e chute √† domicile",
    "Enfant avec fi√®vre √©lev√©e et convulsions",
    "Douleur thoracique chez adulte 50 ans",
    "Saignement abondant suite coupure",
    "Difficult√© respiratoire asthmatique",
    "Perte de connaissance br√®ve",
    "R√©action allergique alimentaire",
    "Br√ªlure thermique √©tendue",
    "Traumatisme cr√¢nien suite chute"
]

def generate_call_transcript(scenario):
    prompt = f"""G√©n√®re un transcript R√âALISTE d'appel d'urgence au SAMU (15) en fran√ßais.

SC√âNARIO: {scenario}

FORMAT REQUIS (JSON):
{{
  "scenario": "{scenario}",
  "caller_type": "t√©moin/victime/proche",
  "duration_seconds": 120-300,
  "transcript": [
    {{"speaker": "ARM", "text": "SAMU 15, j'√©coute"}},
    {{"speaker": "Appelant", "text": "..."}},
    ...
  ],
  "urgency_level": "vital/tr√®s urgent/urgent/peu urgent",
  "symptoms": ["sympt√¥me1", "sympt√¥me2"],
  "actions_taken": ["action1", "action2"],
  "decision": "SMUR envoy√©/Conseil m√©dical/Orientation pompiers"
}}

CONSIGNES:
- Langage naturel avec h√©sitations ("euh", "je sais pas", r√©p√©titions)
- Dur√©e r√©aliste (2-5 minutes = 15-30 √©changes)
- Questions ARM structur√©es (ABCDE: Airways, Breathing, Circulation, Disability, Exposure)
- Stress de l'appelant apparent
- D√©tails m√©dicaux pr√©cis

G√âN√àRE LE JSON COMPLET:"""

    try:
        response = model.generate_content(
            prompt,
            generation_config={
                "temperature": 0.8,
                "max_output_tokens": 2048,
            }
        )
        
        # Extraire JSON
        text = response.text
        json_start = text.find('{')
        json_end = text.rfind('}') + 1
        json_str = text[json_start:json_end]
        
        return json.loads(json_str)
    
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return None

# G√©n√©ration du dataset
dataset = []
for i, scenario in enumerate(scenarios):
    print(f"üé¨ G√©n√©ration {i+1}/{len(scenarios)}: {scenario}")
    call = generate_call_transcript(scenario)
    if call:
        dataset.append(call)
    
    # Sauvegarder apr√®s chaque g√©n√©ration
    with open('emergency_calls_dataset.json', 'w', encoding='utf-8') as f:
        json.dump(dataset, f, ensure_ascii=False, indent=2)

print(f"‚úÖ Dataset g√©n√©r√©: {len(dataset)} appels")