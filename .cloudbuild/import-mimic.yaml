# Copyright 2025 Google LLC
# Pipeline d'import MIMIC-III vers Cloud SQL

steps:
  # Import des données
  - name: "gcr.io/google.com/cloudsdktool/google-cloud-cli:slim"
    id: import-data
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        set -e
        
        echo "Installation de Python et des dépendances..."
        apt-get update && apt-get install -y python3 python3-pip
        pip3 install --break-system-packages pandas sqlalchemy psycopg2-binary google-cloud-storage google-cloud-secret-manager tqdm
        
        echo "Récupération des informations de connexion..."
        
        # Récupérer l'IP de l'instance Cloud SQL
        DB_HOST_RAW=$$(gcloud sql instances describe ${_CONTAINER_NAME}-db-${_ENV} \
          --project=${_TARGET_PROJECT_ID} \
          --format="value(ipAddresses[0].ipAddress)")
        
        # Nettoyer l'IP (enlever tout préfixe potentiel)
        DB_HOST=$$(echo "$$DB_HOST_RAW" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        
        echo "IP de la base de données: $$DB_HOST"
        
        # Vérifier que l'IP est valide
        if [ -z "$$DB_HOST" ]; then
          echo "Erreur: Impossible de récupérer l'IP de la base de données"
          echo "Valeur brute reçue: $$DB_HOST_RAW"
          exit 1
        fi
        
        export DB_HOST
        export DB_PORT=5432
        export DB_NAME=adn_database
        export DB_USER=adn_user
        
        echo "Configuration de connexion:"
        echo "  • Host: $$DB_HOST"
        echo "  • Port: $$DB_PORT"
        echo "  • Database: $$DB_NAME"
        echo "  • User: $$DB_USER"
        
        echo ""
        echo "Vérification du script Python..."
        head -n 20 scripts/import_mimic.py
        echo ""
        echo "Lancement de l'import MIMIC-III..."
        python3 scripts/import_mimic.py \
          --env=${_ENV} \
          --project-id=${_TARGET_PROJECT_ID} \
          --bucket=${_DATA_BUCKET} \
          ${_SUBSET_FLAG}
        
        echo "Import terminé avec succès"

  # Vérification de l'import
  - name: "gcr.io/cloud-builders/gcloud"
    id: verify-import
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        set -e
        
        echo "Vérification de l'import..."
        
        # Récupération du mot de passe depuis Secret Manager
        DB_PASSWORD=$$(gcloud secrets versions access latest \
          --secret=${_CONTAINER_NAME}-db-password-${_ENV} \
          --project=${_TARGET_PROJECT_ID})
        
        # Récupérer l'IP de l'instance Cloud SQL
        DB_HOST_RAW=$$(gcloud sql instances describe ${_CONTAINER_NAME}-db-${_ENV} \
          --project=${_TARGET_PROJECT_ID} \
          --format="value(ipAddresses[0].ipAddress)")
        
        # Nettoyer l'IP (enlever tout préfixe potentiel)
        DB_HOST=$$(echo "$$DB_HOST_RAW" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        
        echo "Connexion à la base: $$DB_HOST"
        
        apt-get update && apt-get install -y postgresql-client
        
        # Compter les tables
        TABLE_COUNT=$$(PGPASSWORD="$$DB_PASSWORD" psql \
          -h "$$DB_HOST" \
          -U adn_user \
          -d adn_database \
          -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';")
        
        echo "Nombre de tables: $$TABLE_COUNT"
        
        # Vérifier qu'il y a des tables
        if [ "$$TABLE_COUNT" -eq 0 ]; then
          echo "Erreur: Aucune table trouvée dans la base de données"
          exit 1
        fi
        
        # Afficher un aperçu
        echo "Aperçu de la table 'patients':"
        PGPASSWORD="$$DB_PASSWORD" psql \
          -h "$$DB_HOST" \
          -U adn_user \
          -d adn_database \
          -c "SELECT * FROM patients LIMIT 3;"
        
        echo "Statistiques par table:"
        PGPASSWORD="$$DB_PASSWORD" psql \
          -h "$$DB_HOST" \
          -U adn_user \
          -d adn_database \
          -c "SELECT 
                schemaname,
                tablename,
                pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size
              FROM pg_tables
              WHERE schemaname = 'public'
              ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
              LIMIT 10;"
        
        echo "_________________________________________________________________________"
        echo "Vérification terminée avec succès"
        echo "_________________________________________________________________________"

substitutions:
  _ENV: staging
  _TARGET_PROJECT_ID: adn-app-chn-staging
  _CONTAINER_NAME: adn-app
  _DATA_BUCKET: adn-app-chn-staging-mimic-data
  _SUBSET_FLAG: ""

logsBucket: gs://${PROJECT_ID}-adn-app-logs/build-logs
options:
  substitutionOption: ALLOW_LOOSE
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET