# Copyright 2025 Google LLC
# Licensed under the Apache License, Version 2.0

steps:
  # Create database backup before deployment
  - name: "gcr.io/cloud-builders/gcloud"
    id: backup-database
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        echo "üì¶ Creating database backup before production deployment..."
        gcloud sql backups create \
          --instance=${_PROD_PROJECT_ID}:${_REGION}:${_CONTAINER_NAME}-db-prod \
          --project=${_PROD_PROJECT_ID} \
          --async
        echo "‚úÖ Backup initiated"

  # Run Production Database Migrations
  - name: "gcr.io/cloud-builders/gcloud"
    id: run-prod-migrations
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        echo "üóÑÔ∏è Running production database migrations..."
        
        # Get database password from Secret Manager
        DB_PASSWORD=$(gcloud secrets versions access latest \
          --secret=${_CONTAINER_NAME}-db-password-prod \
          --project=${_PROD_PROJECT_ID})
        
        # Get Cloud SQL connection info
        DB_HOST=$(gcloud sql instances describe ${_CONTAINER_NAME}-db-prod \
          --project=${_PROD_PROJECT_ID} \
          --format="value(ipAddresses[0].ipAddress)")
        
        echo "Production database host: $DB_HOST"
        
        # Install PostgreSQL client
        apt-get update && apt-get install -y postgresql-client
        
        # Run migrations here
        # Example: PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U app_user -d app_db -f migrations/prod_schema.sql
        
        echo "‚úÖ Production migrations completed"

  # Deploy to Production
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy-production
    entrypoint: gcloud
    args:
      - "run"
      - "deploy"
      - "${_CONTAINER_NAME}"
      - "--image"
      - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO_NAME}/${_CONTAINER_NAME}:${COMMIT_SHA}"
      - "--region"
      - "${_REGION}"
      - "--project"
      - "${_PROD_PROJECT_ID}"
      - "--add-cloudsql-instances"
      - "${_PROD_PROJECT_ID}:${_REGION}:${_CONTAINER_NAME}-db-prod"
      - "--set-env-vars"
      - "DB_NAME=app_db,DB_USER=app_user,INSTANCE_CONNECTION_NAME=${_PROD_PROJECT_ID}:${_REGION}:${_CONTAINER_NAME}-db-prod,USE_MOCK_DB=false"
      - "--set-secrets"
      - "DB_PASSWORD=${_CONTAINER_NAME}-db-password-prod:latest"
      - "--no-allow-unauthenticated"
      - "--max-instances"
      - "20"
      - "--min-instances"
      - "2"

  # Production Health Check
  - name: "gcr.io/cloud-builders/gcloud"
    id: prod-health-check
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        echo "üè• Running production health check..."
        SERVICE_URL=$(gcloud run services describe ${_CONTAINER_NAME} \
          --region ${_REGION} \
          --project ${_PROD_PROJECT_ID} \
          --format="value(status.url)")
        
        # Wait for service to stabilize
        sleep 15
        
        # Get ID token for authenticated endpoint
        ID_TOKEN=$(gcloud auth print-identity-token)
        
        # Check health endpoint with authentication
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: Bearer $ID_TOKEN" \
          $SERVICE_URL/health || echo "000")
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "‚úÖ Production health check passed"
        else
          echo "‚ùå Production health check failed with code: $HTTP_CODE"
          echo "Rolling back deployment..."
          # Implement rollback logic here
          exit 1
        fi

  # Database connection test
  - name: "gcr.io/cloud-builders/gcloud"
    id: test-db-connection
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        echo "üîå Testing database connection..."
        
        DB_PASSWORD=$(gcloud secrets versions access latest \
          --secret=${_CONTAINER_NAME}-db-password-prod \
          --project=${_PROD_PROJECT_ID})
        
        DB_HOST=$(gcloud sql instances describe ${_CONTAINER_NAME}-db-prod \
          --project=${_PROD_PROJECT_ID} \
          --format="value(ipAddresses[0].ipAddress)")
        
        apt-get update && apt-get install -y postgresql-client
        
        if PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U app_user -d app_db -c "SELECT 1;" > /dev/null 2>&1; then
          echo "‚úÖ Database connection successful"
        else
          echo "‚ùå Database connection failed"
          exit 1
        fi

  # Notify deployment success
  - name: gcr.io/cloud-builders/gcloud
    id: deployment-notification
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        echo "_________________________________________________________________________"
        echo "üöÄ PRODUCTION DEPLOYMENT SUCCESSFUL!"
        echo ""
        echo "Deployment Details:"
        echo "  - Image: ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO_NAME}/${_CONTAINER_NAME}:${COMMIT_SHA}"
        echo "  - Database: ${_PROD_PROJECT_ID}:${_REGION}:${_CONTAINER_NAME}-db-prod"
        echo "  - Region: ${_REGION}"
        echo ""
        echo "Service URL:"
        SERVICE_URL=$(gcloud run services describe ${_CONTAINER_NAME} \
          --region ${_REGION} \
          --project ${_PROD_PROJECT_ID} \
          --format="value(status.url)")
        echo "  $SERVICE_URL"
        echo ""
        echo "View logs:"
        echo "  https://console.cloud.google.com/run/detail/${_REGION}/${_CONTAINER_NAME}/logs?project=${_PROD_PROJECT_ID}"
        echo "_________________________________________________________________________"

substitutions:
  _PROD_PROJECT_ID: YOUR_PROD_PROJECT_ID
  _REGION: europe-west1
  _CONTAINER_NAME: adn-agent
  _ARTIFACT_REGISTRY_REPO_NAME: adn-agent-repo

logsBucket: gs://${PROJECT_ID}-${_CONTAINER_NAME}-logs/build-logs
options:
  substitutionOption: ALLOW_LOOSE
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
  machineType: 'E2_HIGHCPU_8'