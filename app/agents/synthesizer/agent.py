"""
Agent 2 : Synth√©tiseur/Critique - ADN (AI Diagnostic Navigator)
'Le Double Cerveau' - R√©sume puis s'auto-critique pour trouver les incoh√©rences
Version G√âN√âRALISABLE - Pas de r√®gles hardcod√©es
COMPATIBLE avec format hospitalier ET appels SAMU
"""

import json
from typing import Dict, List, Any
from google.cloud import aiplatform
from vertexai.generative_models import GenerativeModel


class AgentSynthetiseur:
    """
    Agent qui synth√©tise les donn√©es patient et s'autocritique
    SANS r√®gles hardcod√©es - utilise uniquement l'IA pour g√©n√©raliser
    COMPATIBLE avec format hospitalier ET appels SAMU
    """

    def __init__(self, project_id: str, location: str = "us-central1"):
        self.project_id = project_id
        self.location = location
        aiplatform.init(project=project_id, location=location)
        self.model = GenerativeModel("gemini-2.0-flash")

    def normaliser_input(self, data_input: Dict[str, Any]) -> Dict[str, Any]:
        """
        Normalise n'importe quel format d'input en format unifi√©
        G√®re : format hospitalier, appels SAMU, ou tout autre format
        """

        # Si c'est d√©j√† au bon format (patient_normalized existe)
        if "patient_normalized" in data_input:
            return data_input

        # Si c'est un appel SAMU (avec input.text et expected_output)
        if "input" in data_input and "expected_output" in data_input:
            return self._convertir_format_samu(data_input)

        # Sinon, essayer de d√©tecter automatiquement
        return self._auto_detecter_format(data_input)

    def _convertir_format_samu(self, data_samu: Dict) -> Dict:
        """
        Convertit le format SAMU en format unifi√©
        """
        expected = data_samu.get("expected_output", {})
        meta = data_samu.get("meta", {})
        appel_text = data_samu.get("input", {}).get("text", "")

        # Construction du format normalis√©
        patient_normalized = {
            "id": data_samu.get("id", "SAMU_UNKNOWN"),
            "source_type": "SAMU_CALL",
            "call_transcript": appel_text,
            "scenario": meta.get("scenario", "Non sp√©cifi√©"),
            "age": expected.get("patient_identification", {}).get("age"),
            "sex": expected.get("patient_identification", {}).get("sex"),
            "weight": expected.get("patient_identification", {}).get("weight"),

            "admission": {
                "type": "PREHOSPITAL_EMERGENCY",
                "chief_complaint": expected.get("incident_description", {}).get("main_reason"),
                "mechanism": expected.get("incident_description", {}).get("mechanism"),
                "onset_time": expected.get("incident_description", {}).get("onset_time"),
                "evolution": expected.get("incident_description", {}).get("evolution"),
                "date": None
            },

            "location": expected.get("location", {}),

            "vitals_current": {
                "consciousness": expected.get("patient_identification", {}).get("consciousness"),
                "breathing": expected.get("vital_signs", {}).get("breathing"),
                "pulse": expected.get("vital_signs", {}).get("pulse"),
                "skin_color": expected.get("vital_signs", {}).get("skin_color"),
                "sweating": expected.get("vital_signs", {}).get("sweating"),
                "temperature": expected.get("vital_signs", {}).get("temperature"),
                "bleeding": expected.get("vital_signs", {}).get("bleeding")
            },

            "symptoms": expected.get("symptoms", {}),

            "medical_history": {
                "known_conditions": expected.get("medical_history", {}).get("known_conditions", []),
                "medications_current": expected.get("medical_history", {}).get("medications"),
                "anticoagulant_use": expected.get("medical_history", {}).get("anticoagulant_use"),
                "allergies": expected.get("medical_history", {}).get("allergies"),
                "recent_hospitalization": expected.get("medical_history", {}).get("recent_hospitalization")
            },

            "caller_info": expected.get("caller_info", {}),

            "actions_already_taken": expected.get("actions_already_taken", {}),

            "risk_factors": expected.get("risk_factors", {}),

            "environment_context": expected.get("environment_context", {}),

            "instructions_given": expected.get("instructions_given", {})
        }

        return {"patient_normalized": patient_normalized}

    def _auto_detecter_format(self, data: Dict) -> Dict:
        """
        D√©tecte automatiquement le format et convertit
        Utilise l'IA pour identifier la structure
        """

        prompt_detection = f"""
Tu re√ßois des donn√©es patient dans un format inconnu.

DONN√âES BRUTES :
{json.dumps(data, indent=2, ensure_ascii=False)}

Ta mission : Identifier et extraire TOUTES les informations m√©dicales pertinentes.

Format de sortie (JSON STRICT) :
{{
    "patient_normalized": {{
        "id": "identifiant ou g√©n√©r√©",
        "source_type": "type de source d√©tect√©",
        "age": √¢ge_num√©rique,
        "sex": "homme/femme/inconnu",
        "admission": {{
            "type": "type d'admission",
            "chief_complaint": "motif principal",
            "date": "date si disponible"
        }},
        "vitals_current": {{
            "consciousness": "√©tat de conscience",
            "breathing": "respiration",
            "pulse": "pouls",
            "blood_pressure": "tension",
            "temperature": "temp√©rature",
            "spo2": "saturation"
        }},
        "symptoms": {{
            "pain": {{}},
            "neurological": {{}},
            "respiratory": {{}},
            "cardiac": {{}},
            "autres": {{}}
        }},
        "medical_history": {{
            "known_conditions": [],
            "medications_current": [],
            "allergies": []
        }},
        "labs": [],
        "imaging": [],
        "autres_donnees": {{}}
    }}
}}

Extrait TOUT ce qui est disponible, m√™me si incomplet.
"""

        response = self.model.generate_content(
            prompt_detection,
            generation_config={"response_mime_type": "application/json"}
        )

        return json.loads(response.text)

    def phase_synthese(self, data_patient: Dict[str, Any]) -> Dict[str, Any]:
        """
        PHASE 1 - Mode Jekyll : R√©sum√© Standard
        L'IA cr√©e naturellement un r√©sum√© - AUCUNE r√®gle explicite
        """

        prompt_synthese = f"""
Tu es un m√©decin urgentiste exp√©riment√©. 

Voici TOUTES les donn√©es disponibles pour ce patient :
{json.dumps(data_patient, indent=2, ensure_ascii=False)}

Ta t√¢che : Cr√©e un r√©sum√© clinique professionnel et structur√©.

Format attendu (JSON):
{{
    "summary": "R√©sum√© narratif en 3-5 lignes du tableau clinique",
    "key_problems": ["Probl√®me 1", "Probl√®me 2", ...],
    "severity": "LOW/MEDIUM/HIGH/CRITICAL",
    "clinical_trajectory": "STABLE/DETERIORATING/IMPROVING"
}}

Sois concis mais complet. C'est un r√©sum√© standard de qualit√©.
"""

        response = self.model.generate_content(
            prompt_synthese,
            generation_config={"response_mime_type": "application/json"}
        )

        synthese = json.loads(response.text)
        return synthese

    def phase_critique(self, synthese: Dict[str, Any], data_brutes: Dict[str, Any]) -> Dict[str, Any]:
        """
        PHASE 2 - Mode Hyde : Scepticisme Actif
        L'IA compare et d√©tecte ELLE-M√äME les incoh√©rences - AUCUNE r√®gle
        """

        prompt_critique = f"""
üî¥ CHANGEMENT DE R√îLE CRITIQUE üî¥

Tu es maintenant un m√©decin HYPER-SCEPTIQUE et parano√Øaque sur la s√©curit√© du patient.
Tu assumes que des erreurs fatales peuvent se cacher dans les donn√©es.

VOICI LE R√âSUM√â qui vient d'√™tre fait :
{json.dumps(synthese, indent=2, ensure_ascii=False)}

VOICI TOUTES LES DONN√âES BRUTES ORIGINALES :
{json.dumps(data_brutes, indent=2, ensure_ascii=False)}

TA MISSION CRITIQUE :
1. Compare ligne par ligne le r√©sum√© vs les donn√©es brutes
2. Trouve TOUT ce qui est manquant, minimis√©, ou incoh√©rent
3. Identifie les "signaux cach√©s" dangereux (r√©sultats anormaux pas mentionn√©s, traitements manquants, d√©lais suspects)
4. D√©tecte les contradictions temporelles (ex: r√©sultat positif depuis 12h mais traitement non adapt√©)
5. Rep√®re les ant√©c√©dents enfouis dans les notes qui changent le diagnostic

Questions √† te poser :
- Y a-t-il un r√©sultat de labo/culture CRITIQUE qui n'est pas dans le r√©sum√© ?
- Y a-t-il un m√©dicament qui devrait √™tre l√† mais qui manque ?
- Y a-t-il un d√©lai temporel suspect entre un r√©sultat et une action ?
- Y a-t-il des ant√©c√©dents cach√©s dans les notes textuelles qui sont ignor√©s ?
- Y a-t-il une d√©gradation clinique silencieuse (tendance des signes vitaux) ?

Format de sortie (JSON STRICT) :
{{
    "critical_alerts": [
        {{
            "type": "Type d'alerte (ex: RESULTAT_NON_TRAITE, INTERVENTION_MANQUANTE, etc.)",
            "severity": "HIGH/CRITICAL",
            "finding": "Description pr√©cise de ce qui manque ou est incoh√©rent",
            "source": "O√π dans data_brutes cette info se trouve",
            "clinical_impact": "Cons√©quence clinique potentielle",
            "evidence": {{
                "found_in": "Chemin exact dans les donn√©es",
                "value": "Valeur probl√©matique",
                "comparison": "Ce qui √©tait dans le r√©sum√© (ou absent)"
            }},
            "action_required": "Action m√©dicale urgente n√©cessaire"
        }}
    ],
    "data_inconsistencies": [
        {{
            "type": "TEMPORAL_MISMATCH / MISSING_DATA / CONTRADICTION",
            "description": "Description de l'incoh√©rence",
            "gap_hours": "D√©lai si applicable",
            "consequence": "Impact clinique"
        }}
    ],
    "reliability_assessment": {{
        "dossier_completeness": 0.0-1.0,
        "critical_data_missing": ["Liste des donn√©es critiques absentes"],
        "confidence_level": "LOW/MEDIUM/HIGH",
        "recommendation": "Recommandation sur la fiabilit√© de l'analyse"
    }}
}}

Sois IMPITOYABLE. Un patient peut mourir si tu rates quelque chose.
"""

        response = self.model.generate_content(
            prompt_critique,
            generation_config={"response_mime_type": "application/json"}
        )

        critique = json.loads(response.text)
        return critique

    def calculer_scores_cliniques(self, data_patient: Dict) -> Dict:
        """
        Calcule les scores cliniques standards (SOFA, qSOFA, etc.)
        Utilise l'IA pour identifier QUELS scores sont pertinents
        """

        prompt_scores = f"""
Tu es un expert en scores cliniques de m√©decine d'urgence.

Donn√©es patient :
{json.dumps(data_patient, indent=2, ensure_ascii=False)}

Identifie quels scores cliniques sont pertinents pour ce patient, puis calcule-les.
Exemples : SOFA, qSOFA, SIRS, CHA2DS2-VASc, CURB-65, etc.

Format JSON :
{{
    "applicable_scores": [
        {{
            "score_name": "Nom du score",
            "value": valeur_num√©rique,
            "interpretation": "Interpr√©tation clinique",
            "components": {{"composante": valeur}},
            "clinical_action": "Action sugg√©r√©e selon ce score"
        }}
    ]
}}
"""

        response = self.model.generate_content(
            prompt_scores,
            generation_config={"response_mime_type": "application/json"}
        )

        scores = json.loads(response.text)
        return scores

    def detecter_degradation_silencieuse(self, data_patient: Dict) -> Dict:
        """
        D√©tecte les tendances inqui√©tantes dans les signes vitaux
        L'IA analyse les patterns temporels ELLE-M√äME
        """

        prompt_tendance = f"""
Analyse les tendances cliniques pour d√©tecter une d√©gradation silencieuse.

Donn√©es patient avec historique temporel :
{json.dumps(data_patient, indent=2, ensure_ascii=False)}

Cherche :
- Tendances des signes vitaux (FC qui monte, TA qui baisse, etc.)
- Aggravation progressive des labs (lactate qui monte, cr√©at qui monte)
- Pattern de d√©gradation multi-organique
- Signes pr√©coces de choc ou d√©faillance d'organe

Format JSON :
{{
    "silent_deterioration_detected": true/false,
    "severity": "LOW/MEDIUM/HIGH",
    "trajectory": "STABLE/SLOW_DETERIORATION/RAPID_DETERIORATION",
    "evidence": ["Signal 1", "Signal 2", ...],
    "predicted_outcome": "Pronostic probable si non trait√©",
    "time_window": "Fen√™tre th√©rapeutique estim√©e"
}}
"""

        response = self.model.generate_content(
            prompt_tendance,
            generation_config={"response_mime_type": "application/json"}
        )

        deterioration = json.loads(response.text)
        return deterioration

    def analyser_patient(self, data_input: Dict) -> Dict:
        """
        Pipeline complet : Normalisation + Synth√®se + Critique + Validation
        100% g√©n√©rique - s'adapte √† N'IMPORTE QUEL format et pathologie
        """
        # √âTAPE 0 : Normalisation de l'input
        print("üîÑ √âtape 0 : Normalisation du format d'entr√©e...")
        data_collecteur = self.normaliser_input(data_input)
        print("‚úÖ Format normalis√©")

        print("\nüîÑ Phase 1 : Synth√®se Jekyll (Mode Bienveillant)...")
        synthese = self.phase_synthese(data_collecteur)
        print(f"‚úÖ Synth√®se cr√©√©e")
        print(f"   Probl√®mes identifi√©s : {', '.join(synthese.get('key_problems', []))}")
        print(f"   S√©v√©rit√© : {synthese.get('severity', 'N/A')}")

        print("\n‚ö†Ô∏è Phase 2 : Critique Hyde (Mode Sceptique)...")
        critique = self.phase_critique(synthese, data_collecteur)
        nb_alertes = len(critique.get('critical_alerts', []))
        print(f"üîç {nb_alertes} alertes critiques d√©tect√©es")

        print("\nüìä Phase 3 : Calcul des scores cliniques...")
        scores = self.calculer_scores_cliniques(data_collecteur)
        print(f"   Scores calcul√©s : {', '.join([s['score_name'] for s in scores.get('applicable_scores', [])])}")

        print("\nüìà Phase 4 : D√©tection de d√©gradation silencieuse...")
        deterioration = self.detecter_degradation_silencieuse(data_collecteur)
        print(f"   Trajectoire : {deterioration.get('trajectory', 'N/A')}")

        # R√©sultat final combin√©
        output = {
            "source_data": data_collecteur,  # Inclut les donn√©es normalis√©es
            "synthesis": synthese,
            "critical_alerts": critique.get("critical_alerts", []),
            "data_inconsistencies": critique.get("data_inconsistencies", []),
            "reliability_assessment": critique.get("reliability_assessment", {}),
            "clinical_scores": scores.get("applicable_scores", []),
            "deterioration_analysis": deterioration
        }

        return output


# Fonction d'affichage d√©taill√©
def afficher_resultats_detailles(resultat: Dict, titre_cas: str):
    """
    Affiche les r√©sultats de mani√®re d√©taill√©e comme dans les slides
    """
    print("\n" + "=" * 100)
    print(f"üìã R√âSULTATS D√âTAILL√âS - {titre_cas}")
    print("=" * 100)

    # 1. SYNTH√àSE
    print("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ  üìù SYNTH√àSE CLINIQUE (Phase Jekyll)                        ‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    synthese = resultat['synthesis']
    print(f"\n{synthese.get('summary', 'N/A')}\n")
    print(f"üéØ Probl√®mes cl√©s : {', '.join(synthese.get('key_problems', []))}")
    print(f"‚ö†Ô∏è  S√©v√©rit√© : {synthese.get('severity', 'N/A')}")
    print(f"üìà Trajectoire : {synthese.get('clinical_trajectory', 'N/A')}")

    # 2. ALERTES CRITIQUES
    alertes = resultat.get('critical_alerts', [])
    print("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print(f"‚îÇ  üö® ALERTES CRITIQUES (Phase Hyde) - {len(alertes)} d√©tect√©e(s)    ‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")

    if alertes:
        for i, alerte in enumerate(alertes, 1):
            severite_emoji = "üî¥" if alerte.get('severity') == 'CRITICAL' else "üü°"
            print(f"\n{severite_emoji} ALERTE #{i} - {alerte.get('type', 'N/A')}")
            print(f"   S√©v√©rit√© : {alerte.get('severity', 'N/A')}")
            print(f"   Finding : {alerte.get('finding', 'N/A')}")
            print(f"   Source : {alerte.get('source', 'N/A')}")
            print(f"   Impact clinique : {alerte.get('clinical_impact', 'N/A')}")

            if 'evidence' in alerte:
                print(f"   üìä Evidence :")
                for key, value in alerte['evidence'].items():
                    print(f"      - {key}: {value}")

            print(f"   üíä Action requise : {alerte.get('action_required', 'N/A')}")
    else:
        print("\n‚úÖ Aucune alerte critique d√©tect√©e")

    # 3. INCOH√âRENCES DE DONN√âES
    inconsistencies = resultat.get('data_inconsistencies', [])
    if inconsistencies:
        print("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print(f"‚îÇ  ‚ö†Ô∏è  INCOH√âRENCES D√âTECT√âES - {len(inconsistencies)} trouv√©e(s)        ‚îÇ")
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")

        for i, inco in enumerate(inconsistencies, 1):
            print(f"\n‚ö†Ô∏è  Incoh√©rence #{i} - {inco.get('type', 'N/A')}")
            print(f"   Description : {inco.get('description', 'N/A')}")
            if 'gap_hours' in inco:
                print(f"   D√©lai : {inco.get('gap_hours')} heures")
            print(f"   Cons√©quence : {inco.get('consequence', 'N/A')}")

    # 4. √âVALUATION DE FIABILIT√â (AUTOCRITIQUE)
    reliability = resultat.get('reliability_assessment', {})
    print("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ  üîç √âVALUATION DE FIABILIT√â (Autocritique)                  ‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")

    completeness = reliability.get('dossier_completeness', 0)
    print(f"\nüìä Compl√©tude du dossier : {completeness:.0%}")
    print(f"üéØ Niveau de confiance : {reliability.get('confidence_level', 'N/A')}")

    missing = reliability.get('critical_data_missing', [])
    if missing:
        print(f"\n‚ö†Ô∏è  Donn√©es critiques manquantes :")
        for data in missing:
            print(f"   ‚ùå {data}")

    print(f"\nüí° Recommandation : {reliability.get('recommendation', 'N/A')}")

    # 5. SCORES CLINIQUES
    scores = resultat.get('clinical_scores', [])
    if scores:
        print("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print(f"‚îÇ  üìä SCORES CLINIQUES - {len(scores)} calcul√©(s)                    ‚îÇ")
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")

        for score in scores:
            print(f"\nüìà {score.get('score_name', 'N/A')} : {score.get('value', 'N/A')}")
            print(f"   Interpr√©tation : {score.get('interpretation', 'N/A')}")
            if 'components' in score:
                print(f"   Composantes : {score['components']}")
            print(f"   Action sugg√©r√©e : {score.get('clinical_action', 'N/A')}")

    # 6. ANALYSE DE D√âGRADATION
    deterioration = resultat.get('deterioration_analysis', {})
    if deterioration.get('silent_deterioration_detected'):
        print("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ  üìâ D√âGRADATION SILENCIEUSE D√âTECT√âE                        ‚îÇ")
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")

        print(f"\n‚ö†Ô∏è  S√©v√©rit√© : {deterioration.get('severity', 'N/A')}")
        print(f"üìà Trajectoire : {deterioration.get('trajectory', 'N/A')}")
        print(f"‚è∞ Fen√™tre th√©rapeutique : {deterioration.get('time_window', 'N/A')}")
        print(f"üîÆ Pronostic pr√©dit : {deterioration.get('predicted_outcome', 'N/A')}")

        evidence = deterioration.get('evidence', [])
        if evidence:
            print(f"\nüìä Preuves de d√©gradation :")
            for ev in evidence:
                print(f"   ‚Ä¢ {ev}")

    # 7. JSON COMPLET (comme dans les slides)
    print("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ  üìÑ OUTPUT JSON COMPLET (Format Agent)                      ‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    print("\n```json")
    print(json.dumps(resultat, indent=2, ensure_ascii=False))
    print("```")

    print("\n" + "=" * 100 + "\n")


# Exemple d'utilisation avec N'IMPORTE QUEL format
if __name__ == "__main__":
    # FORMAT 1 : Cas hospitalier (format original)
    cas_sepsis = {
        "patient_normalized": {
            "id": "10006",
            "age": 70,
            "admission": {
                "type": "EMERGENCY",
                "chief_complaint": "SEPSIS",
                "date": "2024-10-14T14:15:00"
            },
            "labs": [
                {"name": "WBC", "value": 18000, "unit": "cells/ŒºL", "flag": "HIGH"},
                {"name": "Lactate", "value": 3.2, "unit": "mmol/L", "flag": "HIGH"}
            ],
            "cultures": [
                {
                    "status": "POSITIVE",
                    "organism": "Staphylococcus aureus (MRSA)",
                    "collected": "2024-10-14T02:30:00",
                    "resulted": "2024-10-14T14:30:00",
                    "antibiogram": {"oxacillin": "R", "vancomycin": "S"}
                }
            ],
            "medications_current": [
                {"name": "Ceftriaxone", "dose": "2g", "route": "IV"}
            ]
        }
    }

    # FORMAT 2 : Appel SAMU - Douleur thoracique (TON FORMAT)
    cas_samu_infarctus = {
        "id": "cardiac_case_01",
        "meta": {
            "scenario": "douleur thoracique / malaise √† domicile",
            "difficulty": "moyen",
            "source": "synthetic",
            "language": "fr"
        },
        "input": {
            "text": "Bonjour, je vous appelle pour mon mari. Il a 58 ans, il est tomb√© dans le salon il y a environ 10 minutes. Il est conscient mais tr√®s p√¢le et se plaint d'une forte douleur √† la poitrine. Il transpire beaucoup et dit qu'il a mal au bras gauche."
        },
        "expected_output": {
            "caller_info": {
                "relationship_to_patient": "√©pouse"
            },
            "location": {
                "address": "24 rue de la R√©publique, 3e √©tage sans ascenseur",
                "city": "Lyon"
            },
            "incident_description": {
                "main_reason": "douleur thoracique apr√®s malaise",
                "mechanism": "effondrement soudain non traumatique",
                "onset_time": "il y a environ 10 minutes"
            },
            "patient_identification": {
                "age": 58,
                "sex": "homme",
                "consciousness": "conscient"
            },
            "vital_signs": {
                "breathing": "rapide mais pr√©sente",
                "skin_color": "p√¢le",
                "sweating": "oui"
            },
            "symptoms": {
                "pain": {
                    "location": "poitrine",
                    "intensity": "s√©v√®re",
                    "radiation": "bras gauche"
                }
            },
            "medical_history": {
                "known_conditions": ["hypertension", "maladie cardiaque"],
                "medications": "b√™ta-bloquant pour le c≈ìur"
            }
        }
    }

    # L'agent fonctionne sur TOUS ces formats diff√©rents !
    agent2 = AgentSynthetiseur(project_id="ai-diagnostic-navigator-475316")

    print("=" * 80)
    print("TEST 1 : Sepsis SARM (Format Hospitalier)")
    print("=" * 80)
    resultat1 = agent2.analyser_patient(cas_sepsis)

    print("\n\n" + "=" * 80)
    print("TEST 2 : Infarctus (Format SAMU)")
    print("=" * 80)
    resultat2 = agent2.analyser_patient(cas_samu_infarctus)
    # print(resultat2)

    # Affichage d√©taill√©
    # afficher_resultats_detailles(resultat1, "Sepsis SARM - Hospitalier")
    # afficher_resultats_detailles(resultat2, "Infarctus - Appel SAMU")

    print("\n\n" + "=" * 80)
    print("TEST 3 : Output Agent r√©colteur")
    print("=" * 80)
    # resultat2 = agent2.analyser_patient("??????????")